{"ast":null,"code":"import React from\"react\";import partialMark from\"../assets/partialMarking.png\";import mcq from\"../assets/mcq.png\";import\"../css/Project.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Project(props){return/*#__PURE__*/_jsxs(\"div\",{className:\"Project\",children:[/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Scuoler LMS for Schools/Universities\"}),/*#__PURE__*/_jsx(\"strong\",{children:\"Link:\"}),\" \",/*#__PURE__*/_jsx(\"a\",{href:\"https://scuoler.com\",children:\"https://scuoler.com\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"Technologies:\"}),\" HTML, CSS, Javascript, React, Node, Express, Rest APIs, PostgreSQL, Sockets.IO, Web RTC, Fontawsome, Material UI\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"Projects Description\"}),\" Scuoler is learning management system (LMS) for education environments. Being nostalgic of long years spent in academia brought the desire to develop this App (from Scratch). Existing tools such as Moodle, Blackboard, Canvas etc. are built using old technologies and has sev- eral drawbacks. We implemented game based techniques with realtime video calling, screensharing features to better engagement and collaboration of students and teachers. Feature for automatically grading student tests and quizes. Textual indexing, dynamic search feature was implemented using Generalized Inverted Index (GIN), Stemming supported in PostgreSQL. Chat feature implemented using Sockets.IO, Web RTC libraries. Frontend in Html, Css, React, Backend using Node, Express JS, Security using Json Web tokens (JWT), bcrypt, crypto-js, Morgan logging library. Database in PostgreSQL. Hired/managed couple of developers for the project.\",/*#__PURE__*/_jsx(\"iframe\",{src:\"https://www.youtube.com/embed/mv6OLu7okKI\",title:\"YouTube video player\",frameborder:\"0\",allow:\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",allowfullscreen:true})]}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Business Intelligence Cloud platform\"}),/*#__PURE__*/_jsx(\"strong\",{children:\"Link:\"}),\" \",/*#__PURE__*/_jsx(\"a\",{href:\"https://www.raymourflanigan.com\",children:\"https://www.raymourflanigan.com\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"Technologies:\"}),\" HTML, CSS, Javascript, React, Node, Webpack, Snowflake Cloud Datawarehouse, SQL Server Integration/Reporting Services, Matillion ETL, Dimensional Modeling, ETL, SQL, Datamigration, Oracle PL/SQL, Datawarehousing, Tableau (basic knowledge), Amazon S3 Cloud store, AWS Lambda, Toad for Oracle, Oracle 8i/10g, MS SQL Server 2017, Transact SQL, Python stack, Perl, Docker containers\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"Projects Description:\"}),\" The project involved building a cloud based Business Intelligence (BI) platform from scratch. Being one of the founding members, tasks involved designing and imple- menting the cloud based data warehouse using Snowflake/Amazon S3 using dimensional modeling, star schema architecture for efficient data processing, creating the ETL specification document and the logical model that maps the existing DB fields to the fields in the target schema. BI report- ing/visualization and analytics. Implementing ETL packages, Change Data Capture (CDC) schemes using PLSQL triggers, the integration layer, extending and modifying the existing Oracle PL/SQL ERP system called GERS, writing PL/SQL procedures and MS Transact SQL functions, packages, jobs, SQL plus reports to enable the integration. Building proof of concept (POC) visualization screens using Tableau and Sql Server Reporting Services. Implemented jobs for data migration from existing legacy 8i/10g database (backend of the GERS ERP System of Raymour and Flanigan sales system) and other source databases in MS SQL Server using SSIS/Matillion jobs scheduled on the SQL server agent. Gained expertise in batch extract, incremental/lambda extract using CDC tables using sequence number/load time stamp. Writing regexp based pattern matching algorithms in PLSQL/Perl for syntactic approximate keyword based searching. Building lambda functions using .Net/Python on AWS Cloud platforms such as AWS Lambda. Once the BI platform was operational, focused on creating Web Apps using Web Technologies (HTML, CSS, Javascript, React JS, JSX, Bootstrap UI, Jquery, Webpack bundler, Node JS) over ASP.net controllers to interact/update data in the datawarehouse in order to mitigate manual processes. Designed and implemented several UI Screens for maintaining the data tables in the datawarehouse.\"]}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"XData\"}),/*#__PURE__*/_jsx(\"strong\",{children:\"Link:\"}),\" \",/*#__PURE__*/_jsx(\"a\",{href:\"https://www.cse.iitb.ac.in/infolab/xdata/\",children:\"https://www.cse.iitb.ac.in/infolab/xdata/\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"Technologies:\"}),\" Java, JSP, JQuery, Html, CSS, SQL, JSQL parser, Dhtml - Xchart/tree JS library, PostgreSQL, Subversion, Git - Github, Gitlab\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"Projects Description:\"}),\" The XData project aims at building an automated SQL query grading software tool for verifying student/programmer written SQL queries against a SQL query provided by Instructor/Tester, which is assumed to be correct. Full stack development for the project in Java/JEE, HTML, CSS, PostgreSQL. Use of formal verification techniques like satisfiability module theory (SAT) techniques for SQL query verification. Also used information retrieval techniques such a Edit distance similarity to find semantic similarity of SQL queries. Reimplementing the query processing module, extending the JSQL parser to support queries having nested with clauses, natural outer joins, array overlap/containment operators. Extended query (pre)processing module by removing redundant tables in SQL queries, (outer) joins, nonrecursive With clause elimination, conversion of selection/having clause predicates to a standard form where >, < operators are converted to less than equal to, great than equal to operators by changing the values of the associated operands depending on the precision of the corresponding attributes, support the ORDER BY clauses and the distinction of subqueries that have ALL/ANY quantification.\",/*#__PURE__*/_jsx(\"img\",{src:partialMark,alt:\"Partial Marking Interface\"})]}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Contextualized Knowledge Repository\"}),/*#__PURE__*/_jsx(\"strong\",{children:\"Link:\"}),\" \",/*#__PURE__*/_jsx(\"a\",{href:\"https://www.fbk.eu/en/\",children:\"https://www.fbk.eu/en/\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"Technologies:\"}),\" Java/J2EE (Struts, Swing, JGraph, Apache Solr), Eclipse, Tomcat, Subversion, Apache Ant, OWL/RDF/SPARQL, Sesame rdf4J graph database(DB) library, Owlim graph DB library, JAWS Wordnet API, OWL API graph DB library, Apache Jena graph DB library\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"Projects Description:\"}),\" The project was initiated for building a framework for modeling and repre- senting context in graph shaped data formats such as RDF/OWL/XML. Also implement efficiently storage/search/querying of contextualized data. Developing the core API and UI interfaces using Java Swing, Struts, Servlets, Apache Solr, Tomcat and visualizing the stored data using charting, visualization API (JGraph) for analysis. Assisted in implemented the module that indexes RDF files onto an Apache Solr server, which is then used for keyword search. An RDF File is scanned for entities (potentially any RDF:Resource), and for each entity, fields such as RDF:Description, RDF:Comment, RDF:Label, its type - the information of whether it is a class, property, or an individual, its unique id (URI), its provenance - the name of the source file in which appears are used to form a single Solr document that is added to the Solr Server. Indexed document server can be keyword searched leveraging the advanced search features of Solr that includes stemming using porter\\u2019s algorithm, removal of delimiters, stopwords, duplicates, case conversion, whitespace removal. Keyword expansion was enabled using expanding the search keywords using synonyms, hypernyms, and hyponyms from the wordnet dictionary. Experimentation with large datasets, tab- ulation, documenting, visualization of obtained results ( some KPIs were average chase computation time, membership detection time, and query response time). Developed various techniques and pro- cedures for deductive closure computation of graphs with extended Datalog+- rules (forall-existential rules). Research efforts led to the development of a novel contextualized RDF/OWL system, called a (unrestricted) quad-system, on which complexity of query answering is Undecidable in the most general case. Developed less expressive fragments called safe, csafe, and cguarded quad-systems, for which combined complexity of query entailment is 3EXPTIME-complete, 2EXPTIME-complete, and 2EXPTIME respectively. Various lower bound complexities were obtained by reduction of the word problem of a double exponentially and single exponentially space bounded alternating turing machine (ATM) respectively. \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{src:mcq,alt:\"Partial Marking Interface\"})]}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Multilingual Graph Databases\"}),/*#__PURE__*/_jsx(\"strong\",{children:\"Link:\"}),\" \",/*#__PURE__*/_jsx(\"a\",{href:\"https://www.dfki.de/en/web\",children:\"https://www.dfki.de/en/web\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"Technologies:\"}),\" Java, Sesame rdf4J graph DB library, Apache Jena, OWLIM Graph DB library\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"Projects Description:\"}),\" The project was focused on building a platform for the storage/querying of knowledge in heterogeneous (multiple) knowledge representation languages (OWL, RDF, Datalog etc.). Experimentation with large datasets, visualization of obtained results (closure size), using graph visualization package using tikz library. Collaborated in developing a semantics called \\u2018reduct- semantics\\u2019 for approximating an OWL ontology as an RDF graph. Using reduct-semantics, forward reasoning can be done on OWL ontologies as the deductive closure is guaranteed to be finite. The system was implemented and tested on industry strength RDF and OWL ontologies.\"]}),/*#__PURE__*/_jsx(\"hr\",{})]});}export default Project;","map":{"version":3,"names":["React","partialMark","mcq","Project","props"],"sources":["/home/mathew/Desktop/companies/2U/rathway-React/Module1/project-portfolio/src/components/Project.js"],"sourcesContent":["import React from \"react\";\n\nimport partialMark from \"../assets/partialMarking.png\";\nimport mcq from \"../assets/mcq.png\";\n\nimport \"../css/Project.css\";\n\nfunction Project(props) {\n  return (\n    <div className=\"Project\">\n      <section>\n        <h3>Scuoler LMS for Schools/Universities</h3>\n        <strong>Link:</strong>{\" \"}\n        <a href=\"https://scuoler.com\">https://scuoler.com</a>\n        <br />\n        <strong>Technologies:</strong> HTML, CSS, Javascript, React, Node,\n        Express, Rest APIs, PostgreSQL, Sockets.IO, Web RTC, Fontawsome,\n        Material UI\n        <br />\n        <strong>Projects Description</strong> Scuoler is learning management\n        system (LMS) for education environments. Being nostalgic of long years\n        spent in academia brought the desire to develop this App (from Scratch).\n        Existing tools such as Moodle, Blackboard, Canvas etc. are built using\n        old technologies and has sev- eral drawbacks. We implemented game based\n        techniques with realtime video calling, screensharing features to better\n        engagement and collaboration of students and teachers. Feature for\n        automatically grading student tests and quizes. Textual indexing,\n        dynamic search feature was implemented using Generalized Inverted Index\n        (GIN), Stemming supported in PostgreSQL. Chat feature implemented using\n        Sockets.IO, Web RTC libraries. Frontend in Html, Css, React, Backend\n        using Node, Express JS, Security using Json Web tokens (JWT), bcrypt,\n        crypto-js, Morgan logging library. Database in PostgreSQL. Hired/managed\n        couple of developers for the project.\n        <iframe\n          src=\"https://www.youtube.com/embed/mv6OLu7okKI\"\n          title=\"YouTube video player\"\n          frameborder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n          allowfullscreen\n        ></iframe>\n      </section>\n      <hr />\n      <section>\n        <h3>Business Intelligence Cloud platform</h3>\n        <strong>Link:</strong>{\" \"}\n        <a href=\"https://www.raymourflanigan.com\">\n          https://www.raymourflanigan.com\n        </a>\n        <br />\n        <strong>Technologies:</strong> HTML, CSS, Javascript, React, Node,\n        Webpack, Snowflake Cloud Datawarehouse, SQL Server Integration/Reporting\n        Services, Matillion ETL, Dimensional Modeling, ETL, SQL, Datamigration,\n        Oracle PL/SQL, Datawarehousing, Tableau (basic knowledge), Amazon S3\n        Cloud store, AWS Lambda, Toad for Oracle, Oracle 8i/10g, MS SQL Server\n        2017, Transact SQL, Python stack, Perl, Docker containers\n        <br />\n        <strong>Projects Description:</strong> The project involved building a\n        cloud based Business Intelligence (BI) platform from scratch. Being one\n        of the founding members, tasks involved designing and imple- menting the\n        cloud based data warehouse using Snowflake/Amazon S3 using dimensional\n        modeling, star schema architecture for efficient data processing,\n        creating the ETL specification document and the logical model that maps\n        the existing DB fields to the fields in the target schema. BI report-\n        ing/visualization and analytics. Implementing ETL packages, Change Data\n        Capture (CDC) schemes using PLSQL triggers, the integration layer,\n        extending and modifying the existing Oracle PL/SQL ERP system called\n        GERS, writing PL/SQL procedures and MS Transact SQL functions, packages,\n        jobs, SQL plus reports to enable the integration. Building proof of\n        concept (POC) visualization screens using Tableau and Sql Server\n        Reporting Services. Implemented jobs for data migration from existing\n        legacy 8i/10g database (backend of the GERS ERP System of Raymour and\n        Flanigan sales system) and other source databases in MS SQL Server using\n        SSIS/Matillion jobs scheduled on the SQL server agent. Gained expertise\n        in batch extract, incremental/lambda extract using CDC tables using\n        sequence number/load time stamp. Writing regexp based pattern matching\n        algorithms in PLSQL/Perl for syntactic approximate keyword based\n        searching. Building lambda functions using .Net/Python on AWS Cloud\n        platforms such as AWS Lambda. Once the BI platform was operational,\n        focused on creating Web Apps using Web Technologies (HTML, CSS,\n        Javascript, React JS, JSX, Bootstrap UI, Jquery, Webpack bundler, Node\n        JS) over ASP.net controllers to interact/update data in the\n        datawarehouse in order to mitigate manual processes. Designed and\n        implemented several UI Screens for maintaining the data tables in the\n        datawarehouse.\n      </section>\n      <hr />\n      <section>\n        <h3>XData</h3>\n        <strong>Link:</strong>{\" \"}\n        <a href=\"https://www.cse.iitb.ac.in/infolab/xdata/\">\n          https://www.cse.iitb.ac.in/infolab/xdata/\n        </a>\n        <br />\n        <strong>Technologies:</strong> Java, JSP, JQuery, Html, CSS, SQL, JSQL\n        parser, Dhtml - Xchart/tree JS library, PostgreSQL, Subversion, Git -\n        Github, Gitlab\n        <br />\n        <strong>Projects Description:</strong> The XData project aims at\n        building an automated SQL query grading software tool for verifying\n        student/programmer written SQL queries against a SQL query provided by\n        Instructor/Tester, which is assumed to be correct. Full stack\n        development for the project in Java/JEE, HTML, CSS, PostgreSQL. Use of\n        formal verification techniques like satisfiability module theory (SAT)\n        techniques for SQL query verification. Also used information retrieval\n        techniques such a Edit distance similarity to find semantic similarity\n        of SQL queries. Reimplementing the query processing module, extending\n        the JSQL parser to support queries having nested with clauses, natural\n        outer joins, array overlap/containment operators. Extended query\n        (pre)processing module by removing redundant tables in SQL queries,\n        (outer) joins, nonrecursive With clause elimination, conversion of\n        selection/having clause predicates to a standard form where &gt;, &lt;\n        operators are converted to less than equal to, great than equal to\n        operators by changing the values of the associated operands depending on\n        the precision of the corresponding attributes, support the ORDER BY\n        clauses and the distinction of subqueries that have ALL/ANY\n        quantification.\n        <img src={partialMark} alt=\"Partial Marking Interface\" />\n      </section>\n      <hr />\n      <section>\n        <h3>Contextualized Knowledge Repository</h3>\n        <strong>Link:</strong>{\" \"}\n        <a href=\"https://www.fbk.eu/en/\">https://www.fbk.eu/en/</a>\n        <br />\n        <strong>Technologies:</strong> Java/J2EE (Struts, Swing, JGraph, Apache\n        Solr), Eclipse, Tomcat, Subversion, Apache Ant, OWL/RDF/SPARQL, Sesame\n        rdf4J graph database(DB) library, Owlim graph DB library, JAWS Wordnet\n        API, OWL API graph DB library, Apache Jena graph DB library\n        <br />\n        <strong>Projects Description:</strong> The project was initiated for\n        building a framework for modeling and repre- senting context in graph\n        shaped data formats such as RDF/OWL/XML. Also implement efficiently\n        storage/search/querying of contextualized data. Developing the core API\n        and UI interfaces using Java Swing, Struts, Servlets, Apache Solr,\n        Tomcat and visualizing the stored data using charting, visualization API\n        (JGraph) for analysis. Assisted in implemented the module that indexes\n        RDF files onto an Apache Solr server, which is then used for keyword\n        search. An RDF File is scanned for entities (potentially any\n        RDF:Resource), and for each entity, fields such as RDF:Description,\n        RDF:Comment, RDF:Label, its type - the information of whether it is a\n        class, property, or an individual, its unique id (URI), its provenance -\n        the name of the source file in which appears are used to form a single\n        Solr document that is added to the Solr Server. Indexed document server\n        can be keyword searched leveraging the advanced search features of Solr\n        that includes stemming using porter’s algorithm, removal of delimiters,\n        stopwords, duplicates, case conversion, whitespace removal. Keyword\n        expansion was enabled using expanding the search keywords using\n        synonyms, hypernyms, and hyponyms from the wordnet dictionary.\n        Experimentation with large datasets, tab- ulation, documenting,\n        visualization of obtained results ( some KPIs were average chase\n        computation time, membership detection time, and query response time).\n        Developed various techniques and pro- cedures for deductive closure\n        computation of graphs with extended Datalog+- rules (forall-existential\n        rules). Research efforts led to the development of a novel\n        contextualized RDF/OWL system, called a (unrestricted) quad-system, on\n        which complexity of query answering is Undecidable in the most general\n        case. Developed less expressive fragments called safe, csafe, and\n        cguarded quad-systems, for which combined complexity of query entailment\n        is 3EXPTIME-complete, 2EXPTIME-complete, and 2EXPTIME respectively.\n        Various lower bound complexities were obtained by reduction of the word\n        problem of a double exponentially and single exponentially space bounded\n        alternating turing machine (ATM) respectively. <br />\n        <img src={mcq} alt=\"Partial Marking Interface\" />\n      </section>\n      <hr />\n      <section>\n        <h3>Multilingual Graph Databases</h3>\n        <strong>Link:</strong>{\" \"}\n        <a href=\"https://www.dfki.de/en/web\">https://www.dfki.de/en/web</a>\n        <br />\n        <strong>Technologies:</strong> Java, Sesame rdf4J graph DB library,\n        Apache Jena, OWLIM Graph DB library\n        <br />\n        <strong>Projects Description:</strong> The project was focused on\n        building a platform for the storage/querying of knowledge in\n        heterogeneous (multiple) knowledge representation languages (OWL, RDF,\n        Datalog etc.). Experimentation with large datasets, visualization of\n        obtained results (closure size), using graph visualization package using\n        tikz library. Collaborated in developing a semantics called ‘reduct-\n        semantics’ for approximating an OWL ontology as an RDF graph. Using\n        reduct-semantics, forward reasoning can be done on OWL ontologies as the\n        deductive closure is guaranteed to be finite. The system was implemented\n        and tested on industry strength RDF and OWL ontologies.\n      </section>\n      <hr />\n    </div>\n  );\n}\n\nexport default Project;\n"],"mappings":"AAAA,MAAOA,MAAP,KAAkB,OAAlB,CAEA,MAAOC,YAAP,KAAwB,8BAAxB,CACA,MAAOC,IAAP,KAAgB,mBAAhB,CAEA,MAAO,oBAAP,C,wFAEA,QAASC,QAAT,CAAiBC,KAAjB,CAAwB,CACtB,mBACE,aAAK,SAAS,CAAC,SAAf,wBACE,wCACE,4DADF,cAEE,iCAFF,CAEyB,GAFzB,cAGE,UAAG,IAAI,CAAC,qBAAR,iCAHF,cAIE,aAJF,cAKE,yCALF,kIAQE,aARF,cASE,gDATF,u6BAuBE,eACE,GAAG,CAAC,2CADN,CAEE,KAAK,CAAC,sBAFR,CAGE,WAAW,CAAC,GAHd,CAIE,KAAK,CAAC,0FAJR,CAKE,eAAe,KALjB,EAvBF,GADF,cAgCE,aAhCF,cAiCE,wCACE,4DADF,cAEE,iCAFF,CAEyB,GAFzB,cAGE,UAAG,IAAI,CAAC,iCAAR,6CAHF,cAME,aANF,cAOE,yCAPF,4YAaE,aAbF,cAcE,iDAdF,uzDAjCF,cA4EE,aA5EF,cA6EE,wCACE,6BADF,cAEE,iCAFF,CAEyB,GAFzB,cAGE,UAAG,IAAI,CAAC,2CAAR,uDAHF,cAME,aANF,cAOE,yCAPF,8IAUE,aAVF,cAWE,iDAXF,ksCA8BE,YAAK,GAAG,CAAEH,WAAV,CAAuB,GAAG,CAAC,2BAA3B,EA9BF,GA7EF,cA6GE,aA7GF,cA8GE,wCACE,2DADF,cAEE,iCAFF,CAEyB,GAFzB,cAGE,UAAG,IAAI,CAAC,wBAAR,oCAHF,cAIE,aAJF,cAKE,yCALF,oQASE,aATF,cAUE,iDAVF,6rEA0CiD,aA1CjD,cA2CE,YAAK,GAAG,CAAEC,GAAV,CAAe,GAAG,CAAC,2BAAnB,EA3CF,GA9GF,cA2JE,aA3JF,cA4JE,wCACE,oDADF,cAEE,iCAFF,CAEyB,GAFzB,cAGE,UAAG,IAAI,CAAC,4BAAR,wCAHF,cAIE,aAJF,cAKE,yCALF,0FAOE,aAPF,cAQE,iDARF,gpBA5JF,cA+KE,aA/KF,GADF,CAmLD,CAED,cAAeC,QAAf"},"metadata":{},"sourceType":"module"}